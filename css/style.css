/*
?Reglas Css consta de 2 partes:
1) Selector:
    Es el documento HTML al que le podemos aplicar el bloque de declaracion de estilos 
    un selector podria ser cualquier etiqueta HTML, 
2) Bloque de declaraciones:
    Cada uno de los atributos que se va a modificar
    cada atributo va a tener la siguiente sintaxis.
    atributo:valor;
    atributo-de-mas-de-dos-palabras: otro-valor;
    esto va a estar entre llaves {}
 Ejemplo de las 2 partes
*/
/*
mandara a llamar una hoja de estilos dentro de otra.
importente: ES una mala practica usar el @import, porque aon bloqueante a la hora de que el navegador lee esta instruccion
*/

@import url("otra-hoja.css");

html {
  scroll-behavior: smooth;
  background-color: cornsilk;
}

h1 {
  color: orangered;
  background-color: black;
}

/*
todo Selectores basicos
  1)Etiquetas-son elementos HTML
  2)Identificadores- atributo id- #
  3)Clases-atributo class-.
*/
p {
  color: midnightblue;
}

/*Dar estilos con id se considera un antipatron, porque el id es unico */
#parrafo-dos {
  background-color: skyblue;
}

/*dar estilos con clases nos permite reutiizar nuestro codigo CSS*/
.bg-skyeblue {
  background: skyblue;
}

.bg-steelblue {
  background-color: steelblue;
}

.text-20 {
  font-size: 20px;
}

.text-32 {
  font-size: 32px;
}

.text-white {
  color: white;
}
/* todo selectores avanzados  */
/* ? selectores de hijos (directos y descendientes) */
/* selector de hijos directos se usa el ">"*/
.hijos-directos > li {
  background-color: thistle;
}

/* si no te importa en que nivel de ese elemento padre esta el elemento al que le voy a aplicar estilos, entonces usa el espacio en blanco*/
.hijos-descendientes b {
  background-color: thistle;
}
/* ?  selectores Hermanos (en general y adyacente) */
/* Los selectores de hermanos van a aplicar los elementos que son hermanos y que est√©n por debajo del elemento de referencia */
.hermanos-general ~ li {
  background-color: thistle;
}

/*en este solo aplica al hermano que esta abajo, solo a uno*/
.hermanos-adyacentes + li {
  background-color: thistle;
}

/**iconos de los enlaces*/
.icons {
  width: 40px;
  height: 40px;
}

/*? selectores de atributos */
/* Selectores-atributos, este aplica las etiquetas que tengan un atributo en especifico */
.selectores-atributos a[href] {
  color: orangered;
}

/* esto aplica a las etiquetas que tengan  atributos con cierto valor  */
.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}

/* El comodin del * aplica el estilo si tiene el texto en cuestion en cualquier parte */
.selectores-atributos a[href*="jonmircha"] {
  font-size: 24px;
}

/* El comodin del ^ aplica el estilo siempre y cuando el texto empiecen con la palabra o termino deceado */
.selectores-atributos a[href^="https://"]
{
  text-decoration: none;
}

/* El comodin del $ aplica el estilo si tiene el texto en cuestion al final */
.selectores-atributos a[href$=".com"] {
  background-color: black;
}

/* El comodin del ~ aplica el estilo si tiene el texto en cuestion en una lista separada por espacios */
.selectores-atributos a[class~="cursos"] {
  background-color: midnightblue;
}

/* El comodin del | aplica el estilo si tiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion venga un guion medio */
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/*? Selector Universal */
/* a todo el documento se le aplicara este estilo */
* {
  font-family: sans-serif;
}

/* a todos los elementos dentro de la class selector_universal se palicaran el stilo puesto  */
.selector_universal * {
  font-size: 24px;
}
/* todo pseudoclases */
/* ? pseudoclases de elementos interactivos */
/**psudoclases- Dan estilos dependiendo del contexto, posicion o estado del elemento
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
 */

/* los elementos que esten en la clase form-pseudoclases, los elementos que tengan required se aplicara el estilo */
.form-pseudoclases *:required {
  border-color: yellow;
}

/* a los elementos que tengan valido, los vordes esten de color verde */
.form-pseudoclases *:valid {
  border-color: green;
}

/* a los elementos que tenfan invalido, los bordes seran rojos */
.form-pseudoclases *:invalid {
  border-color: red;
}

/* en el recuadro que este seleccionado el fondo sera de color establecido */
.form-pseudoclases *:focus {
  background-color: skyblue;
}

/* a lo que tenga la propiedad disabled, tendra de color rosa */
.form-pseudoclases *:disabled {
  background-color: pink;
}

/*
!importante orden de definicion de las pseudoclases(su jerarquia):
:link
:active
:visited
:hover
*/

/* a los enlaces visatos le apliquemos un color, la clase visited tiene que ir arriva del estado hover */
.menu-pseudoclases a:visited {
  color: olive;
}

/** hover: es aquel estado en el que tenemos el cursor del mouse en el elemento, este estado aplica para cualquier elemento.

**hover es un estado interactivo , por eso tiene que estar al final de las pseudoclases  */

/* esto probocara que al padar el mouse por los enlaces, estos pasen a color anaranjado */
.menu-pseudoclases a:hover {
  color: orange;
}
/* * el estado hover lo tiene cualquier elemento (culaquier etiqueta) */
/* cuadno el parrafo este en estado hover( la flecha del mouse este sobre el parrafo ) este incrementara su tama√±o */
.p-pseudoclases:hover {
  font-size: 20px;
}

/* cuando el elemento llamado "temario-css" tenga el target(tenga en la url el id activo) */
#temario-css:target {
  background-color: lightgreen;
}

/* ? pseudoclases por la posicion que que ocupa el elemento dentro de su contenedor */

/* el estilo se va a plicar al primer elemento que tenga el elemento padre y que sea un li*/
.lista-pseudoclases li:first-child {
  color: green;
}

/* lo mismo, pero para el √∫ltimo hijo li  */
.lista-pseudoclases li:last-child {
  color: violet;
}
/* lo mismno pero al numero del hijo que quieras , pasando el n√∫mero como un argumento */
.lista-pseudoclases li:nth-child(3) {
  color: navy;
}
/* tambien permiten usar expreciones, como siertas formulas, en este de 4 en 4 li se van a plicar el estilo */
.lista-pseudoclases li:nth-child(4n) {
  font-size: 20px;
}
/* lo mismo , estilo negrita */
.lista-pseudoclases li:nth-child(3n + 1) {
  font-weight: bold;
}
/* lo mismo , para elementos pares (even) y impares (odd) */
.lista-pseudoclases li:nth-child(even) {
  background-color: yellow;
}
.lista-pseudoclases li:nth-child(odd) {
  background-color: orangered;
}
/* el primero en su tipo se va aplicar el estilo, ya que si se pone p:first-child, no va aplicar , porque el primer  hijo es el header */
.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}
/* lo mismo pero en ultimo en su tipo */
.articulo-pseudoclases p:last-of-type {
  background-color: violet;
}
/* lo mismo pero al n√∫mero que pasemos como parametro */
.articulo-pseudoclases p:nth-of-type(3) {
  background-color: fuchsia;
}
/* negacion , aplicar estilo a todos excepto, si quieres agregar mas elementos que no quieras, las vas agregando por comas, not(p,button,.lista,#uno) */
.articulo-pseudoclases *:not(p) {
  background-color: beige;
}

/* todo pseudo elementos */
/* estos van a dar estilos a partes especificas de un elemento , para diferenciar de las clases , en las clases se usan solo ':' *:not(p) en los elementos se usan '::' *::not(p) 
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements*/

/* before , after (antes y despues) */
.saga-geminis::before {
  content: "ü§º‚Äç‚ôÇÔ∏è";
}
.saga-geminis::after {
  content: "‚ôä";
}
.saga-precio::before {
  content: "$";
  font-weight: bold;
}
.saga-precio::after {
  content: "USD";
  font-weight: bold;
}
/* referencia a la primera letra */
.p-pseudoelementos::first-letter {
  font-weight: bold;
  font-size: 32px;
}
/* referencia a la primera linea */
.p-pseudoelementos::first-line {
  color: coral;
}
/* cambiar el color al seleccionar */
.p-pseudoelementos::selection {
  color: greenyellow;
  background-color: black;
}
/* estilos al placeholder de un input */
.input-pseudoelementos::placeholder {
  color: green;
}

/* todo Agrupar selectores */
/* compartir los estilos , esto se hace atraves de ','(comas) */
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
  border-color: yellow;
  border-width: 2px;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
}
/* todo Algoitmo de CSS */
/*
Es la forma en que el navegador aplica aplica los esilos al documento HTML.Es vital entender este concepto para que entiendas como se aplican y en algunas ocaciones se sobre escriben las reglas CSS.
? 1) La Cascada
? 2) La Especifidad
? 3) La Herencia 
 */

/* ? La C√°scada
 *Es el mecanismo en que el navegador aplica los estilos y toma en cuenta lo siquiente en este orden:
 *1)El Origen del c√≥digo:
    -El User Agent(los estilos por defecto del navegador)
    -Personalizaciones del usuario
    -Los estilos del autor 
 *2) La Especialidad del 
 
 *3) Orden de Aparici√≥n
 */
/* ? La Especifidad
*Es el peso que tiene un selector cuando hay conflicto de estilos Se calcula de la siguiente forma:

Etiquetas y pseudoelementos -----------------0,0,0,1
*(por cada etiqueta o pseudoelemto que tenga el selector se va a ir sumando 1 en el primer dijito de derecha a izquierda)
Clases, atributos y pseudoclases-------------0,0,1,0
*(si el selector tienen un nombre de clases, atributos o pseudoclases, por cada uno se va a ir sumando un 1 en el segundo dijito)
Identificadores -----------------------------0,1,0,0
*(si el selector tirne identificadores, se va a ir sumando 1 en el tercer dijito)
Estilos en linea ----------------------------1,0,0,0
*(si tiene estilos en linea, se va a ir sumando 1 en el cuarto dijito)
-!impartant---------------------Rompe la especifidad
*(la palabra important rompe la especifidad)
 */

/* ? La Herencia 
 *Es la capacidad de un selector de obtener (heredar) los valores de sus ancestros m√°s cercanos, para aplicarla se usa el valor 'inherit', si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuesti√≥n con el valor 'initial' 
 lista de propiedades que en las que aplica la herencia
 https://web.dev/learn/css/inheritance?hl=es#which-properties-are-inheritable
 */
/*! --especificidad y cascada----------------- */
/** los estilos por cascada , el ultimo seria en estilar , pero por especificidad, esto cambia , el de mayor especificidad aplicara el estilo */

/** 4  ahora esto en una mala pracica , el poner mas de 2 selectores en linea, por especificidad como tiene mayor peso , seria el estilo que se pondria */
blockquote#cita-marco.cita-marco {
  background-color: lightsteelblue;
}

blockquote {
  background-color: burlywood;
}
/**2 como ahora este id tine mayor especificidad , de 100, al final se aplicaria este estilo */
#cita-marco {
  background-color: lightgreen;
}

/**1 como la especifididad de este en de 11, mas que el de la clase cita-marco , se quedaria con este estilo, por especificidad */
blockquote.cita-marco {
  background-color: tomato;
}

.cita-marco {
  background-color: cornflowerblue;
}

/**6 Esto es una mala practica , pero con esto se rompe la especificidad y ahora este es el estilo que se pondra en la etiqueta en comun que se estaban aplicando los stilos  */
.cita-marco {
  background-color: mediumaquamarine !important;
}

/**3  ahora este que tine mayor especificidad, es el estilo que se aplicaria */
blockquote#cita-marco {
  background-color: lightsalmon;
}

/* *7, como importan rompre la especificidad, al haber otro se aplica la cascada , el √∫ltimo estilo se aplica */
.cita-marco {
  background-color: moccasin !important;
  font-size: 32px;
  border-style: dotted;
  border-color: red;
}

/* !--------herencia------- */
/* hay propiedades que no se heredan como bordes, fondos , etc; las propiedades que si se heredan son las tipografias (tama√±o,letra),etc */

/* aunque pareciera que estaba pintado antes de poner esto , la verdad es que se pintaba porque estaba dentro de la etiqueta blockquote, pero ahora esta heredando el color de su padre */
/* recordar que los colores no se heredan, las tipografias si, si quieres heredar se usa el valor 'inherit' y si queremos evitarla o quitarla , se puede ponr otro valor o poner 'initial' */
.cita-marco cite {
  background-color: pink;
  background-color: inherit;
  font-size: 24px;
  font-size: initial;
  border-style: inherit;
  border-color: inherit;
}
